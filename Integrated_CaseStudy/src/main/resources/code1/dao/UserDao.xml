<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="code1.dao.UserDao">
    <!--配置实体类属性和数据库表中列的对应关系-->
    <resultMap id="BaseResultMap" type="code1.domain.User">
        <id column="user_id" jdbcType="VARCHAR" property="id"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="state" jdbcType="DECIMAL" property="state"/>
        <result column="gender" jdbcType="CHAR" property="gender"/>
        <result column="telephone" jdbcType="VARCHAR" property="telephone"/>
        <result column="birthday" jdbcType="VARCHAR" property="birthday"/>
        <result column="join_date" jdbcType="VARCHAR" property="joinDate"/>
        <result column="dept_id" jdbcType="VARCHAR" property="deptId"/>
        <association
                property="dept"
                column="dept_id"
                javaType="code1.domain.Dept"
                select="code1.dao.DeptDao.findById"/>
    </resultMap>

    <resultMap id="UserRoleResultMap" type="code1.domain.UserRole">
        <id column="role_id" jdbcType="VARCHAR" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="is_checked" jdbcType="VARCHAR" property="isChecked"/>
    </resultMap>

    <!--配置查询的列名公共SQL语句-->
    <sql id="Base_Column_List">
        user_id, email, user_name,  password, state, gender, telephone, birthday, join_date, dept_id
    </sql>

    <!--配置查询所有，带条件-->
    <select id="findAll" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from ss_user

    </select>

    <!--配置根据ID查询-->
    <select id="findById" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from ss_user
        where user_id = #{id,jdbcType=VARCHAR}
    </select>

    <!--配置根据id删除-->
    <delete id="delete" parameterType="java.lang.String">
        delete from ss_user where user_id = #{id,jdbcType=VARCHAR}
    </delete>

    <!--配置全字段插入，当某个字段没有值时，插入null-->
    <insert id="save" parameterType="code1.domain.User">
        insert into ss_user (user_id, email, user_name,  password, state,
        gender, telephone, birthday, join_date, dept_id
        )
        values (#{id,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR},
        #{password,jdbcType=VARCHAR}, #{state,jdbcType=DECIMAL}, #{gender,jdbcType=CHAR},
        #{telephone,jdbcType=VARCHAR}, #{birthday,jdbcType=VARCHAR}, #{joinDate,jdbcType=VARCHAR},
        #{deptId,jdbcType=VARCHAR}
        )
    </insert>

    <!--配置全字段更新，当提供的数据为null时，数据库数据会被更新为null-->
    <update id="update" parameterType="code1.domain.User">
        update ss_user
        set email = #{email,jdbcType=VARCHAR},
        user_name = #{userName,jdbcType=VARCHAR},
        password = #{password,jdbcType=VARCHAR},
        state = #{state,jdbcType=DECIMAL},
        gender = #{gender,jdbcType=CHAR},
        telephone = #{telephone,jdbcType=VARCHAR},
        birthday = #{birthday,jdbcType=VARCHAR},
        join_date = #{joinDate,jdbcType=VARCHAR},
        dept_id = #{deptId,jdbcType=VARCHAR}
        where user_id = #{id,jdbcType=VARCHAR}
    </update>

    <!--配置根据ID查询-->
    <select id="findRolesByUserId" parameterType="java.lang.String" resultMap="UserRoleResultMap">
        SELECT
            role_id,
            NAME,
            CASE
                WHEN role_id IN (SELECT role_id FROM ss_role_user WHERE user_id = #{'userId'})
                THEN 'checked'
                ELSE ''
            END
            AS is_checked
        FROM
            ss_role
    </select>

    <!--配置根据roleId删除关系表数据-->
    <delete id="deleteUserRole" parameterType="java.lang.String">
        delete from ss_role_user
        where user_id = #{userId,jdbcType=VARCHAR}
    </delete>

    <!--配置全字段插入，当某个字段没有值时，插入null-->
    <insert id="saveUserRole" parameterType="map">
        insert into ss_role_user (user_id, role_id)
        values (#{userId,jdbcType=VARCHAR}, #{roleId,jdbcType=VARCHAR})
    </insert>

    <!--配置根据Email查询-->
    <select id="findByEmail" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from ss_user
        where email = #{email,jdbcType=VARCHAR}
    </select>

    <!--配置根据ID查询-->
    <select id="findModulesUrlsByUserId" parameterType="java.lang.String" resultType="java.lang.String">
        select sm.curl
            from ss_role_user as sru,
                ss_role_module as srm,
                ss_module as sm
            where sru.user_id = #{userId,jdbcType=VARCHAR}
                and sru.role_id = srm.role_id
                and srm.module_id = sm.module_id;
    </select>

</mapper>